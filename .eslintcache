[{"C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\index.js":"1","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\App.js":"2","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\reportWebVitals.js":"3","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Cities.js":"4","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Connect\\Connect.js":"5","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\City.js":"6","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Connect\\RegisterForm.js":"7","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Connect\\LoginForm.js":"8"},{"size":455,"mtime":1608135609217,"results":"9","hashOfConfig":"10"},{"size":1964,"mtime":1608172713960,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1123,"mtime":1608138152988,"results":"13","hashOfConfig":"10"},{"size":840,"mtime":1608136407055,"results":"14","hashOfConfig":"10"},{"size":1761,"mtime":1608176022484,"results":"15","hashOfConfig":"10"},{"size":3158,"mtime":1608064838394,"results":"16","hashOfConfig":"10"},{"size":2488,"mtime":1608064832917,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"hbgnd9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"20"},"C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\index.js",[],["41","42"],"C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\App.js",["43"],"import './App.css'\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\"\nimport React, { useState } from 'react'\nimport Connect from './Connect/Connect';\nimport MyCities from './Cities';\nimport logo from './images/logo.png';\n\n\nexport const managerContext = React.createContext()\n\nfunction App() {\n  const [isLogin, setIsLogin] = useState(false)\n\n  const LogoutHandler = () => setIsLogin(false)\n  var hello;\n  fetch(\"/\").then(data => data.json()).then(data => hello = data)\n  return (\n    <Router>\n      <div class=\"site-header\">\n        <nav class=\"navbar navbar-expand-md navbar-dark bg-steel fixed-top\">\n          <div class=\"container\">\n\n            <Link class=\"navbar-brand mr-4\" to=\"/\"> <img src={logo} height=\"50px\" /></Link>\n            <div class=\"collapse navbar-collapse\" id=\"navbarToggle\">\n              <div class=\"navbar-nav mr-auto\">\n                {isLogin && <Link class=\"nav-item nav-link\" to=\"/my-cities\">View Cities</Link>}\n              </div>\n              <div class=\"navbar-nav\">\n                {isLogin ?\n                  <Link class=\"nav-item nav-link\" onClick={LogoutHandler} to=\"/\">Logout</Link>\n                  :\n                  <Link class=\"nav-item nav-link\" to=\"/connect\">Login &ensp;| &ensp;Register</Link>\n                }\n              </div>\n            </div>\n          </div >\n        </nav >\n      </div >\n      <Switch>\n        <managerContext.Provider value={{ isLogin: isLogin, setIsLogin: setIsLogin }}>\n          <Route path=\"/connect\">\n            {!isLogin ? <Connect /> :\n              <Redirect replace to=\"/records\" />\n            }\n          </Route>\n          <Route path=\"/my-cities\">\n            {isLogin ? <MyCities /> :\n              <Redirect replace to=\"/connect\" />\n            }\n          </Route>\n          <Route exact path=\"/\">\n            {hello}\n          </Route>\n        </managerContext.Provider>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\reportWebVitals.js",[],"C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Cities.js",["44","45"],"import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useRouteMatch } from \"react-router-dom\"\r\nimport City from './City'\r\n\r\n\r\nexport const align_center_style = {\r\n    position: 'fixed',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    padding: '50px',\r\n    zIndex: 100,\r\n    border: \"50px solid light red\"\r\n}\r\n\r\nfunction MyCities() {\r\n    let { path, url } = useRouteMatch()\r\n    const citisNames = [\"Tel Aviv-Jaffa\", \"Rishon Lezion\", \"Givatayim\", \"Holon\", \"Petah Tikva\", \"Hispin\"]\r\n    return (<div style={{ \"margin-left\": \"280px\" }} >\r\n        <h1 class=\"article-metadata\">Cities</h1><br></br>\r\n        {citisNames.map(name => <><Link to={url + '/' + name} class=\"btn btn-outline-dark\">{name}</Link>&emsp;&emsp;</>)}\r\n        <br></br><br></br><br></br><br></br>\r\n        <Switch>\r\n            <Route exact path={path}>\r\n                <h3>Please Select a city.</h3>\r\n            </Route>\r\n            <Route path={`${path}/:cityName`}>\r\n                <City />\r\n            </Route>\r\n        </Switch>\r\n    </div >)\r\n}\r\n\r\n\r\nexport default MyCities;","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Connect\\Connect.js",[],"C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\City.js",["46","47","48"],"import React, { useState } from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport staticImg from './images/static.jpeg'\r\nimport hispinGood from './images/hispinGood.jpeg'\r\nimport hispinBad from './images/hispinBad.jpeg'\r\nimport axios from 'axios'\r\n\r\nfunction City() {\r\n    let { cityName } = useParams();\r\n\r\n    const getStatusHandlerClick = () => {\r\n        var hispinImg = document.getElementById(\"hispinImg\");\r\n        \r\n        // send request to backEnd - asking for data in spesific city\r\n        axios.get(`/my-cities/${cityName}/status`).then(res => {\r\n            const pillers = res.data[`${cityName}`]\r\n            // for each piller in respone, check if it has a problem or not and showing pit map\r\n            for (const pillerID in pillers)\r\n                if (pillers[pillerID] === true) // there is a problem\r\n                    hispinImg.src = hispinBad\r\n                else\r\n                    hispinImg.src = hispinGood\r\n        })\r\n    }\r\n\r\n    if (cityName !== \"Hispin\")\r\n        return (<div>\r\n            <h4>{cityName} EasyRuv Map</h4>\r\n            <img src={staticImg} />\r\n        </div>)\r\n    else {\r\n        return (\r\n            <table>\r\n                <tr>\r\n                    <th><h4>Hispin EasyRuv Map</h4></th>\r\n                    <th><h4>Option</h4></th>\r\n                </tr>\r\n                <tr>\r\n                    <td><img id=\"hispinImg\" src={hispinGood} /></td>\r\n                    <td style={{ \"vertical-align\": \"top\" }}>\r\n                        &emsp;&emsp;\r\n                    <button id=\"getStatus\" class=\"btn btn-secondary\" onClick={getStatusHandlerClick}>Get Status!</button>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default City;","C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Connect\\RegisterForm.js",["49"],"import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { managerContext } from '../App';\r\n\r\nfunction RegisterForm() {\r\n    const history = useHistory()\r\n\r\n    const [registerMsg, setRegisterMsg] = useState(\"\")\r\n\r\n    const manager_context = React.useContext(managerContext)\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({})\r\n    const password = useRef({})\r\n    password.current = watch(\"password\", \"\")\r\n    const onSubmit = async data => {\r\n        if (data.email===\"someone@gmail.com\")\r\n            alert(\"Error! data alredy taken!\")\r\n        else\r\n        {\r\n            manager_context.setIsLogin(true)\r\n            history.push(\"/my-cities\")\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div class=\"content-section\" >\r\n            <h3 class=\"article-metadata\"> Register</h3>\r\n            <br></br>\r\n            <form onSubmit={e => e.preventDefault()}>\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"example@email.com\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" name=\"password\" type=\"password\" placeholder=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                    maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                })}\r\n                />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n\r\n                <label>Repeat Password</label>\r\n                <input class=\"list-group-item\" name=\"Password_confirm\" type=\"password\" placeholder=\"repeat password\"\r\n                    ref={register({\r\n                        validate: value => value === password.current || \"The passwords do not match\",\r\n                        required: \"You must specify a Repeat password\",\r\n                        minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                        maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                    })}\r\n                />\r\n                {errors.Password_confirm && <p style={{ color: 'red' }}>{errors.Password_confirm.message}</p>}\r\n                <br></br>\r\n                {registerMsg !== \"\" && <p style={{ color: 'red' }}>{registerMsg}</p>}\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Sign Up\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm",["50","51"],"C:\\Users\\yakir\\Desktop\\easy-ruv\\EasyRuv\\src\\Connect\\LoginForm.js",["52"],"import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { managerContext } from '../App';\r\n\r\nfunction LoginForm() {\r\n    const history = useHistory()\r\n    const manager_context = React.useContext(managerContext)\r\n    const [loginMsg, setLoginMsg] = useState(\"\")\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n    const password = useRef({});\r\n    password.current = watch(\"password\", \"\");\r\n\r\n    const onSubmit = data => {\r\n        if (data[\"password\"] === \"1234\" && data.email===\"s@s\")\r\n        {\r\n            manager_context.setIsLogin(true)\r\n            history.push(\"/my-cities\")\r\n        }\r\n        else\r\n            alert(\"Error! invaild email or password\")\r\n\r\n    };\r\n\r\n    return (\r\n        <div class=\"content-section\" >\r\n            <h3 class=\"article-metadata\"> Login</h3>\r\n            <form onSubmit={e => e.preventDefault()}><br></br>\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"email\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" type=\"password\" placeholder=\"password\" name=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 4, message: \"Password must have at least 4 characters\" },\r\n                    maxLength: { value: 20, message: \"Password must have no morw then 20 characters\" }\r\n                })} />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n                <input type=\"checkbox\" name=\"rememberMe\" ref={register} />\r\n                <label>Remember Me</label>\r\n                <br></br>\r\n\r\n                {loginMsg !== \"\" && <p style={{ color: 'red' }}>{loginMsg}</p>}\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Sign In\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":23,"column":53,"nodeType":"59","endLine":23,"endColumn":85},{"ruleId":"60","severity":1,"message":"61","line":2,"column":27,"nodeType":"62","messageId":"63","endLine":2,"endColumn":33},{"ruleId":"60","severity":1,"message":"64","line":2,"column":56,"nodeType":"62","messageId":"63","endLine":2,"endColumn":64},{"ruleId":"60","severity":1,"message":"65","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":29,"column":13,"nodeType":"59","endLine":29,"endColumn":36},{"ruleId":"57","severity":1,"message":"58","line":39,"column":25,"nodeType":"59","endLine":39,"endColumn":64},{"ruleId":"60","severity":1,"message":"66","line":9,"column":25,"nodeType":"62","messageId":"63","endLine":9,"endColumn":39},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},{"ruleId":"60","severity":1,"message":"69","line":9,"column":22,"nodeType":"62","messageId":"63","endLine":9,"endColumn":33},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'useState' is defined but never used.","'setRegisterMsg' is assigned a value but never used.",["70"],["71"],"'setLoginMsg' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]