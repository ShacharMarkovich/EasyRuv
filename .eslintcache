[{"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\index.js":"1","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\App.js":"2","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Connect\\Connect.js":"3","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Connect\\RegisterForm.js":"4","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Connect\\LoginForm.js":"5","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Cities.js":"6","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\City.js":"7","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\reportWebVitals.js":"8"},{"size":455,"mtime":1608135609217,"results":"9","hashOfConfig":"10"},{"size":1914,"mtime":1608150208208,"results":"11","hashOfConfig":"10"},{"size":840,"mtime":1608136407055,"results":"12","hashOfConfig":"10"},{"size":3158,"mtime":1608064838394,"results":"13","hashOfConfig":"10"},{"size":2488,"mtime":1608064832917,"results":"14","hashOfConfig":"10"},{"size":1123,"mtime":1608138152988,"results":"15","hashOfConfig":"10"},{"size":2805,"mtime":1608143864368,"results":"16","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v7s0r1",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\index.js",[],"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\App.js",["37"],"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Connect\\Connect.js",[],["38","39"],"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Connect\\RegisterForm.js",["40"],"import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { managerContext } from '../App';\r\n\r\nfunction RegisterForm() {\r\n    const history = useHistory()\r\n\r\n    const [registerMsg, setRegisterMsg] = useState(\"\")\r\n\r\n    const manager_context = React.useContext(managerContext)\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({})\r\n    const password = useRef({})\r\n    password.current = watch(\"password\", \"\")\r\n    const onSubmit = async data => {\r\n        if (data.email===\"someone@gmail.com\")\r\n            alert(\"Error! data alredy taken!\")\r\n        else\r\n        {\r\n            manager_context.setIsLogin(true)\r\n            history.push(\"/my-cities\")\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div class=\"content-section\" >\r\n            <h3 class=\"article-metadata\"> Register</h3>\r\n            <br></br>\r\n            <form onSubmit={e => e.preventDefault()}>\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"example@email.com\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" name=\"password\" type=\"password\" placeholder=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                    maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                })}\r\n                />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n\r\n                <label>Repeat Password</label>\r\n                <input class=\"list-group-item\" name=\"Password_confirm\" type=\"password\" placeholder=\"repeat password\"\r\n                    ref={register({\r\n                        validate: value => value === password.current || \"The passwords do not match\",\r\n                        required: \"You must specify a Repeat password\",\r\n                        minLength: { value: 8, message: \"Password must have at least 8 characters\" },\r\n                        maxLength: { value: 50, message: \"Password must have no morw then 50 characters\" }\r\n                    })}\r\n                />\r\n                {errors.Password_confirm && <p style={{ color: 'red' }}>{errors.Password_confirm.message}</p>}\r\n                <br></br>\r\n                {registerMsg !== \"\" && <p style={{ color: 'red' }}>{registerMsg}</p>}\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Sign Up\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Connect\\LoginForm.js",["41"],"import React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { managerContext } from '../App';\r\n\r\nfunction LoginForm() {\r\n    const history = useHistory()\r\n    const manager_context = React.useContext(managerContext)\r\n    const [loginMsg, setLoginMsg] = useState(\"\")\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n    const password = useRef({});\r\n    password.current = watch(\"password\", \"\");\r\n\r\n    const onSubmit = data => {\r\n        if (data[\"password\"] === \"1234\" && data.email===\"s@s\")\r\n        {\r\n            manager_context.setIsLogin(true)\r\n            history.push(\"/my-cities\")\r\n        }\r\n        else\r\n            alert(\"Error! invaild email or password\")\r\n\r\n    };\r\n\r\n    return (\r\n        <div class=\"content-section\" >\r\n            <h3 class=\"article-metadata\"> Login</h3>\r\n            <form onSubmit={e => e.preventDefault()}><br></br>\r\n                <label>Email</label>\r\n                <input class=\"list-group-item\" type=\"email\" placeholder=\"email\" name=\"email\" ref={register({\r\n                    required: \"You must specify an Email\",\r\n                    maxLength: { value: 50, message: \"Email must have no morw then 50 characters\" },\r\n                    pattern: { value: /^\\S+@\\S+$/i, message: \"Email must contain '@'\" }\r\n                })} />\r\n                {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\r\n                <br></br>\r\n\r\n                <label>Password</label>\r\n                <input class=\"list-group-item\" type=\"password\" placeholder=\"password\" name=\"password\" ref={register({\r\n                    required: \"You must specify a password\",\r\n                    minLength: { value: 4, message: \"Password must have at least 4 characters\" },\r\n                    maxLength: { value: 20, message: \"Password must have no morw then 20 characters\" }\r\n                })} />\r\n                {errors.password && <p style={{ color: 'red' }}>{errors.password.message}</p>}\r\n                <br></br>\r\n\r\n                <input type=\"checkbox\" name=\"rememberMe\" ref={register} />\r\n                <label>Remember Me</label>\r\n                <br></br>\r\n\r\n                {loginMsg !== \"\" && <p style={{ color: 'red' }}>{loginMsg}</p>}\r\n                <input class=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)} value=\"Sign In\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm","C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\Cities.js",["42","43"],"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\City.js",["44","45","46","47"],"C:\\Users\\yakir\\Desktop\\easy-ruv\\src\\reportWebVitals.js",[],{"ruleId":"48","severity":1,"message":"49","line":21,"column":13,"nodeType":"50","endLine":21,"endColumn":44},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":9,"column":25,"nodeType":"57","messageId":"58","endLine":9,"endColumn":39},{"ruleId":"55","severity":1,"message":"59","line":9,"column":22,"nodeType":"57","messageId":"58","endLine":9,"endColumn":33},{"ruleId":"55","severity":1,"message":"60","line":2,"column":27,"nodeType":"57","messageId":"58","endLine":2,"endColumn":33},{"ruleId":"55","severity":1,"message":"61","line":2,"column":56,"nodeType":"57","messageId":"58","endLine":2,"endColumn":64},{"ruleId":"55","severity":1,"message":"62","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":28},{"ruleId":"55","severity":1,"message":"63","line":8,"column":8,"nodeType":"57","messageId":"58","endLine":8,"endColumn":17},{"ruleId":"48","severity":1,"message":"49","line":57,"column":13,"nodeType":"50","endLine":57,"endColumn":36},{"ruleId":"48","severity":1,"message":"49","line":67,"column":25,"nodeType":"50","endLine":67,"endColumn":66},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'setRegisterMsg' is assigned a value but never used.","Identifier","unusedVar","'setLoginMsg' is assigned a value but never used.","'Router' is defined but never used.","'Redirect' is defined but never used.","'align_center_style' is defined but never used.","'hispinErr' is defined but never used.","no-global-assign","no-unsafe-negation"]